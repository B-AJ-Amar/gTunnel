# Render Dockerfile for gTunnel Server
FROM golang:1.23-alpine AS builder

WORKDIR /app

# Install git (needed for go modules)
RUN apk add --no-cache git

# Copy go mod files
COPY go.mod go.sum ./
RUN go mod download

# Copy source code
COPY . .

# Build the server binary
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -ldflags '-extldflags "-static"' -o gtunnel-server ./cmd/server

# Final stage
FROM alpine:latest

# Install ca-certificates for HTTPS connections
RUN apk --no-cache add ca-certificates

WORKDIR /root/

# Copy the binary and startup script from builder stage
COPY --from=builder /app/gtunnel-server .
COPY --from=builder /app/start.sh .

# Make startup script executable
RUN chmod +x start.sh

# Expose port (will be overridden by Render's PORT env var)
EXPOSE 7205

# Create a non-root user
RUN adduser -D -s /bin/sh gtunnel

# Change ownership of files to gtunnel user
RUN chown gtunnel:gtunnel gtunnel-server start.sh

USER gtunnel

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:${PORT:-7205}/health || exit 1

# Set the startup script as entrypoint
ENTRYPOINT ["./start.sh"]
